#!/bin/bash

#
# Recursive search and replace method
#
# @param $1 Old string to be replaced
# @param $2 New string to replace it
#
function search_and_replace {
  if [ $# -ne 2 ]
  then
    echo "search_and_replace <old> <new>"
    return 1
  fi

  git grep -I --name-only '' | xargs perl -pi -e "s/$1/$2/g"
}

#
# Updates a migration's timestamp. Useful for rebasing when there
# are outdated migrations.
#
# @param $1 Migration timestamp that needs to be brought up to date
#
function update_migration_timestamp {
  local migration

  migration=$(find db/migrate -name "$1_*.rb")

  if [ "$(echo "$migration" | wc -l)" -gt 1 ]
  then
    echo "*** You have several migrations for the same timestamp."
    return 1
  fi

  mv "$migration" "${migration//$1/$(generate_migration_timestamp)}"
}

#
# Finds the branch a migration timestamp belongs to.
#
# Sometimes you forget to undo a migration when switching out from a branch.
# This function find which branch a "********** NO FILE **********" migration
# belongs to, so you can switch to it to undo it.
#
# @param $1 Migration timestamp that needs to be found
#
function find_migration_timestamp {
  local branches

  branches=$(git branch --no-color | cut -c3-)

  for branch in $branches
  do
    if git ls-tree --full-name "$branch:db/migrate" | grep -q "$1"
    then
      echo "Migration with timestamp $1 found in branch $branch"
      return 0
    fi
  done

  echo "Migration with timestamp $1 not found in any branch"
  return 1
}

#
# Generates a DB migration timestamp in Rails format
#
function generate_migration_timestamp {
  date +%Y%m%d%H%M%S
}
