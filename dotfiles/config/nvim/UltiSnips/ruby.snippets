snippet debug "Adds a byebug breakpoint"
require 'byebug'; byebug
endsnippet

snippet desc "Adds a RSpec describe block" b
describe "${1}" do
	$2
end
endsnippet

snippet bef "Adds a RSpec before block" b
before { $1 }
endsnippet

snippet context "Adds an RSpec context block" b
context "${1}" do
	$2
end
endsnippet

snippet it "Adds an RSpec it block" b
it "${1}" do
	$2
end
endsnippet

snippet class "Defines a new class with a comment header" b
#
# $1
#
class $2
	def initialize(${3:*args})
		$4
	end
end
endsnippet

snippet defi "Adds a new initialize method" b
def initialize${1:(${2:*args})}
	$0
end
endsnippet

snippet def "Adds a new method" b
def $1
	$2
end
endsnippet

snippet let "Adds a new RSpec let block" b
let(:$1) { $2 }
endsnippet

snippet let! "Adds a new RSpec let! block" b
let!(:$1) { $2 }
endsnippet

snippet # "A new interpolated string" i
#\{$1\}
endsnippet

snippet frozen "A new frozen string literal magic comment" i
# frozen_string_literal: true

endsnippet
